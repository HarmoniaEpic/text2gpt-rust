name: Buildable Branch CI/CD

# buildableブランチでのみ実行
# CPU版: musl静的リンクバイナリ（全Linux対応）
# GPU版: AppImage形式（CUDA動的検出）
#
# 前提条件:
# - Cargo.tomlに以下のフィーチャーが定義されていること:
#   [features]
#   default = ["cpu"]
#   cpu = []
#   cuda = []
#
on:
  push:
    branches: [ buildable ]
  pull_request:
    branches: [ buildable ]
  workflow_dispatch:
    # 手動実行時はbuildableブランチでのみ許可

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_LOG: debug

jobs:
  # ジョブ実行前のブランチチェック
  branch-check:
    name: Verify Branch
    runs-on: ubuntu-latest
    outputs:
      is-buildable: ${{ steps.check.outputs.is-buildable }}
    steps:
      - name: Check if buildable branch
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/buildable" ]] || [[ "${{ github.base_ref }}" == "buildable" ]]; then
            echo "is-buildable=true" >> $GITHUB_OUTPUT
            echo "✅ Running on buildable branch"
          else
            echo "is-buildable=false" >> $GITHUB_OUTPUT
            echo "❌ Not on buildable branch, skipping workflow"
            exit 1
          fi

  # コードフォーマットチェック
  fmt:
    name: Rustfmt Check
    needs: branch-check
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check code formatting
        run: |
          cargo fmt --all -- --check
          echo "✅ Code formatting check passed"

  # Clippyによる静的解析
  clippy:
    name: Clippy Analysis
    needs: branch-check
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-buildable"
          cache-on-failure: true
      
      - name: Run Clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
          echo "✅ Clippy analysis passed"

  # セキュリティ監査
  security:
    name: Security Audit
    needs: branch-check
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security audit
        uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check dependencies
        run: |
          cargo tree --duplicate
          echo "✅ Security audit passed"

  # ユニットテストとビルド
  test-and-build:
    name: Test and Build
    needs: [branch-check, fmt, clippy]
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-buildable-${{ matrix.os }}-${{ matrix.rust }}"
          cache-on-failure: true
      
      - name: Print environment info
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Rust: ${{ matrix.rust }}"
          rustc --version
          cargo --version
      
      - name: Build (Debug mode)
        run: |
          cargo build --verbose --all-features
          echo "✅ Debug build completed"
      
      - name: Run tests
        run: |
          cargo test --verbose --all-features -- --nocapture
          echo "✅ All tests passed"
      
      - name: Build documentation
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          cargo doc --no-deps --all-features
          echo "✅ Documentation built successfully"
      
      - name: Build (Release mode)
        run: |
          cargo build --release --verbose --all-features
          echo "✅ Release build completed"
      
      - name: Check binary size
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ls -la target/release/text2gpt1.exe
          else
            ls -la target/release/text2gpt1
          fi

  # 統合テスト
  integration-tests:
    name: Integration Tests
    needs: [branch-check, test-and-build]
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-buildable-integration"
      
      - name: Run integration tests
        run: |
          # 統合テストがある場合は実行
          if [[ -d "tests" ]]; then
            cargo test --test '*' --release
            echo "✅ Integration tests passed"
          else
            echo "ℹ️  No integration tests found"
          fi

  # コードカバレッジ
  coverage:
    name: Code Coverage
    needs: [branch-check, test-and-build]
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install tarpaulin
        run: |
          cargo install cargo-tarpaulin
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-buildable-coverage"
      
      - name: Generate coverage report
        run: |
          cargo tarpaulin --out xml --avoid-cfg-tarpaulin --timeout 600
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cobertura.xml
          flags: unittests
          name: buildable-coverage
          fail_ci_if_error: false

  # ビルド成果物の作成
  artifacts:
    name: Build Artifacts
    needs: [branch-check, test-and-build, integration-tests]
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux CPU版 (musl静的リンク)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: text2gpt1-linux-x64-static
            binary_name: text2gpt1
            build_type: cpu-static
          
          # Windows版
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: text2gpt1-windows-x64
            binary_name: text2gpt1.exe
            build_type: standard
          
          # macOS Intel版
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: text2gpt1-macos-x64
            binary_name: text2gpt1
            build_type: standard
          
          # macOS Apple Silicon版
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: text2gpt1-macos-arm64
            binary_name: text2gpt1
            build_type: standard
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install musl tools (Linux)
        if: matrix.build_type == 'cpu-static' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-apple-darwin' && matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-buildable-artifacts-${{ matrix.target }}"
      
      - name: Build optimized binary
        env:
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
          CARGO_PROFILE_RELEASE_STRIP: true
        run: |
          if [[ "${{ matrix.build_type }}" == "cpu-static" ]]; then
            # musl静的リンクビルド（CPU版）
            cargo build --release --target ${{ matrix.target }} --no-default-features --features cpu
          else
            # 通常ビルド
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Verify static linking (Linux musl)
        if: matrix.build_type == 'cpu-static'
        run: |
          file target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          ldd target/${{ matrix.target }}/release/${{ matrix.binary_name }} || echo "✅ Static binary confirmed (ldd failed as expected)"
      
      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a -tzip ../../../${{ matrix.artifact_name }}.zip ${{ matrix.binary_name }}
          else
            tar czf ../../../${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}
          fi
          cd ../../..
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip
          retention-days: 7

  # GPU版 AppImageビルド
  gpu-appimage-build:
    name: GPU AppImage Build (CUDA)
    needs: [branch-check, test-and-build]
    if: needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-20.04  # AppImageの互換性のため古いUbuntuを使用
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            wget \
            file \
            libfuse2 \
            libgtk-3-0 \
            libx11-6 \
            libxcb1 \
            libxext6 \
            libxfixes3 \
            libxi6 \
            libxrender1 \
            libxcb-render0 \
            libxcb-shape0 \
            libxcb-xfixes0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-buildable-gpu-appimage"
      
      - name: Build with CUDA support
        run: |
          cargo build --release --features cuda
          echo "✅ GPU build completed"
      
      - name: Download AppImage tools
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          
          # Extract AppImage tool (GitHub Actions環境ではFUSEが使えないため)
          ./linuxdeploy-x86_64.AppImage --appimage-extract
          mv squashfs-root linuxdeploy
      
      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp target/release/text2gpt1 AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/text2gpt1.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Text2GPT1
          Comment=Generate custom GPT models from prompts
          Exec=text2gpt1
          Icon=text2gpt1
          Categories=Development;Utility;
          Terminal=true
          EOF
          
          # Create a simple icon (you can replace with actual icon)
          convert -size 256x256 xc:navy -fill white -gravity center \
            -pointsize 48 -annotate +0+0 'T2G' \
            AppDir/usr/share/icons/hicolor/256x256/apps/text2gpt1.png || \
            touch AppDir/usr/share/icons/hicolor/256x256/apps/text2gpt1.png
      
      - name: Bundle dependencies (excluding CUDA)
        run: |
          # Use linuxdeploy to bundle dependencies
          ./linuxdeploy/AppRun \
            --appdir AppDir \
            --executable AppDir/usr/bin/text2gpt1 \
            --desktop-file AppDir/usr/share/applications/text2gpt1.desktop \
            --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/text2gpt1.png
          
          # Remove CUDA libraries if accidentally bundled
          find AppDir -name "libcuda*" -delete
          find AppDir -name "libnvidia*" -delete
          find AppDir -name "libcudnn*" -delete
          
          echo "✅ Dependencies bundled (CUDA excluded)"
      
      - name: Create AppImage
        run: |
          # Download appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Extract appimagetool (for GitHub Actions)
          ./appimagetool-x86_64.AppImage --appimage-extract
          mv squashfs-root appimagetool
          
          # Create AppImage
          ARCH=x86_64 ./appimagetool/AppRun AppDir text2gpt1-linux-x64-cuda.AppImage
          
          echo "✅ AppImage created"
      
      - name: Test AppImage extraction
        run: |
          chmod +x text2gpt1-linux-x64-cuda.AppImage
          ./text2gpt1-linux-x64-cuda.AppImage --appimage-extract
          ls -la squashfs-root/usr/bin/
          rm -rf squashfs-root
      
      - name: Compress AppImage
        run: |
          tar czf text2gpt1-linux-x64-cuda-appimage.tar.gz text2gpt1-linux-x64-cuda.AppImage
      
      - name: Upload GPU AppImage
        uses: actions/upload-artifact@v3
        with:
          name: text2gpt1-linux-x64-cuda-appimage
          path: text2gpt1-linux-x64-cuda-appimage.tar.gz
          retention-days: 7

  # 最終サマリー
  summary:
    name: Build Summary
    needs: [branch-check, fmt, clippy, security, test-and-build, integration-tests, coverage, artifacts, gpu-appimage-build]
    if: always() && needs.branch-check.outputs.is-buildable == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "# Build Summary for buildable branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Format Check | ${{ needs.fmt.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Clippy | ${{ needs.clippy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test & Build | ${{ needs.test-and-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Artifacts | ${{ needs.artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GPU AppImage Build | ${{ needs.gpu-appimage-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "### CPU Version (Static Binary)" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux x64 (musl)**: Universal static binary - works on all Linux distributions" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows x64**: Standard Windows executable" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS x64/ARM64**: Native macOS binaries" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GPU Version (AppImage)" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux x64 CUDA AppImage**: Portable GPU-accelerated version" >> $GITHUB_STEP_SUMMARY
          echo "  - Requires NVIDIA GPU with CUDA 11.0+" >> $GITHUB_STEP_SUMMARY
          echo "  - Includes all necessary libraries except CUDA runtime" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: buildable" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
